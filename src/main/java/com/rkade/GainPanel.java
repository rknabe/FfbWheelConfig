package com.rkade;

import javax.swing.*;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.text.NumberFormat;
import java.util.List;
import java.util.logging.Logger;

public class GainPanel implements DeviceListener, ActionListener, FocusListener {
    private final static Logger logger = Logger.getLogger(GainPanel.class.getName());
    private final List<JComponent> controls;
    private JFormattedTextField gainText;
    private JLabel gainPercent;
    private JSlider gainSlider;
    private JPanel gainPanel;
    private JLabel labelText;
    private short gainIndex;
    private Device device = null;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public GainPanel() {
        NumberFormat format = NumberFormat.getInstance();
        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setValueClass(Short.class);
        formatter.setMinimum(Short.MIN_VALUE);
        formatter.setMaximum(Short.MAX_VALUE);
        format.setGroupingUsed(false); //no commas
        formatter.setAllowsInvalid(false);

        DefaultFormatterFactory formatterFactory = new DefaultFormatterFactory() {
            @Override
            public JFormattedTextField.AbstractFormatter getFormatter(JFormattedTextField tf) {
                return formatter;
            }
        };
        gainText.setFormatterFactory(formatterFactory);

        controls = List.of(gainText, gainSlider);

        setPanelEnabled(false);
        setupControlListener();
    }

    public void setGainIndex(short gainIndex) {
        this.gainIndex = gainIndex;
    }

    public void setGainLabel(String label) {
        labelText.setText(label);
    }

    private void setPanelEnabled(boolean enable) {
        for (JComponent component : controls) {
            component.setEnabled(enable);
        }
    }

    private void setupControlListener() {
        for (JComponent component : controls) {
            component.addFocusListener(this);
            switch (component) {
                case AbstractButton button -> button.addActionListener(this);
                case JTextField textField -> textField.addActionListener(this);
                case JComboBox<?> comboBox -> comboBox.addActionListener(this);
                default -> {
                }
            }
        }
    }

    @Override
    public void deviceAttached(Device device) {
        this.device = device;
        setPanelEnabled(true);
    }

    @Override
    public void deviceDetached(Device device) {
        this.device = null;
        setPanelEnabled(false);
    }

    @Override
    public void deviceUpdated(Device device, String status, DataReport report) {
        if (report != null) {
            if (report.getReportType() == DataReport.DATA_REPORT_ID) {
                if (report instanceof GainsDataReport gainsDataReport) {
                    updateControls(gainsDataReport);
                }
            }
        }
    }

    private void updateControls(GainsDataReport gainsDataReport) {
        int amount = gainsDataReport.getValues().get(gainIndex);
        if (!gainText.isFocusOwner()) {
            gainText.setValue(amount);
        }
        if (!gainSlider.getValueIsAdjusting()) {
            gainSlider.setValue(amount);
        }
        double percent = ((double) amount / (double) 1024) * 100;
        gainPercent.setText(String.format("%.1f%%", percent));
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        boolean status = handleGainEvent(e);
        if (!status) {
            logger.warning("Action failed for:" + e.getActionCommand());
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        boolean status = handleGainEvent(e);
        if (!status) {
            logger.warning("Focus lost, failed for:" + e.getSource());
        }
    }

    private boolean handleGainEvent(AWTEvent e) {
        return true; //TODO: finish this !!!!!!!!!!!!!!!!!!
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        gainPanel = new JPanel();
        gainPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        gainPanel.setMinimumSize(new Dimension(562, 41));
        labelText = new JLabel();
        labelText.setHorizontalAlignment(2);
        labelText.setMinimumSize(new Dimension(105, 17));
        labelText.setPreferredSize(new Dimension(105, 17));
        labelText.setText("");
        gainPanel.add(labelText);
        gainText = new JFormattedTextField();
        gainText.setFocusLostBehavior(1);
        gainText.setHorizontalAlignment(2);
        gainText.setPreferredSize(new Dimension(65, 30));
        gainPanel.add(gainText);
        gainPercent = new JLabel();
        gainPercent.setEnabled(true);
        gainPercent.setText("100%");
        gainPanel.add(gainPercent);
        gainSlider = new JSlider();
        gainSlider.setMajorTickSpacing(128);
        gainSlider.setMaximum(2048);
        gainSlider.setMinimumSize(new Dimension(220, 31));
        gainSlider.setMinorTickSpacing(32);
        gainSlider.setName("");
        gainSlider.setPaintLabels(false);
        gainSlider.setPaintTicks(true);
        gainSlider.setPreferredSize(new Dimension(350, 31));
        gainSlider.setValue(1024);
        gainPanel.add(gainSlider);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return gainPanel;
    }

}
