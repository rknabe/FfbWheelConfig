package com.rkade;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainForm implements DeviceListener, ActionListener {
    private final static String CENTER_BUTTON = "Set Center";
    private JPanel mainPanel;
    private JTabbedPane Inputs;
    private JPanel ffbPanel;
    private JPanel bottomPanel;
    private JComboBox<String> deviceComboBox;
    private JLabel firmwareLabel;
    private JComboBox<String> rangeComboBox;
    private JLabel rangeLabel;
    private JSlider wheelSlider;
    private JButton centerButton;
    private JTextField velocityText;
    private JTextField accText;
    private JLabel accLabel;
    private JLabel degreesLabel;
    private JPanel wheelPanel;

    public MainForm() {
        centerButton.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (CENTER_BUTTON.equals(e.getActionCommand())) {

        }
    }

    @Override
    public void deviceAttached(Device device) {
        deviceComboBox.addItem(device.getName());
    }

    @Override
    public void deviceDetached(Device device) {
        deviceComboBox.removeItem(device.getName());
    }

    @Override
    public void deviceUpdated(Device device, String status, DataReport report) {
        if (status != null) {
            firmwareLabel.setText(status);
        }

        if (report != null) {
            if (report.getReportType() == DataReport.DATA_REPORT_ID) {
                if (report instanceof WheelDataReport) {
                    WheelDataReport wheelData = (WheelDataReport) report;
                    String newRange = String.valueOf(wheelData.getRange());
                    String oldRange = (String) rangeComboBox.getSelectedItem();
                    if (!newRange.equals(oldRange)) {
                        rangeComboBox.removeAllItems();
                        rangeComboBox.addItem(newRange);
                    }
                    wheelSlider.setValue(wheelData.getValue());
                    wheelSlider.setToolTipText(String.valueOf(wheelData.getValue()));
                    velocityText.setText(String.valueOf(wheelData.getVelocity()));
                    accText.setText(String.valueOf(wheelData.getAcceleration()));
                    degreesLabel.setText(String.format("%.1f°", wheelData.getAngle()));
                }
                //System.out.println(report);
            }
        }
    }

    public JComponent getRootComponent() {
        return mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setPreferredSize(new Dimension(1024, 768));
        Inputs = new JTabbedPane();
        Inputs.setPreferredSize(new Dimension(1024, 600));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(Inputs, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setMinimumSize(new Dimension(1024, 600));
        Inputs.addTab("Inputs", panel1);
        wheelPanel = new JPanel();
        wheelPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        wheelPanel.setPreferredSize(new Dimension(1000, 75));
        panel1.add(wheelPanel, BorderLayout.NORTH);
        wheelPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Axis 0 (X - Steering)", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        rangeLabel = new JLabel();
        rangeLabel.setText("Range");
        wheelPanel.add(rangeLabel);
        rangeComboBox = new JComboBox();
        wheelPanel.add(rangeComboBox);
        centerButton = new JButton();
        centerButton.setLabel("Set Center");
        centerButton.setPreferredSize(new Dimension(100, 30));
        centerButton.setText("Set Center");
        wheelPanel.add(centerButton);
        wheelSlider = new JSlider();
        wheelSlider.setEnabled(false);
        wheelSlider.setMajorTickSpacing(8192);
        wheelSlider.setMaximum(32768);
        wheelSlider.setMinimum(-32768);
        wheelSlider.setPaintLabels(true);
        wheelSlider.setPaintTicks(true);
        wheelSlider.setPaintTrack(true);
        wheelSlider.setPreferredSize(new Dimension(400, 40));
        wheelSlider.setSnapToTicks(false);
        wheelSlider.setValue(0);
        wheelSlider.setValueIsAdjusting(false);
        wheelPanel.add(wheelSlider);
        degreesLabel = new JLabel();
        degreesLabel.setHorizontalTextPosition(2);
        degreesLabel.setPreferredSize(new Dimension(50, 31));
        degreesLabel.setText("00.00°");
        wheelPanel.add(degreesLabel);
        final JLabel label1 = new JLabel();
        label1.setText("Velocity:");
        wheelPanel.add(label1);
        velocityText = new JTextField();
        velocityText.setMinimumSize(new Dimension(25, 30));
        velocityText.setPreferredSize(new Dimension(75, 30));
        wheelPanel.add(velocityText);
        accLabel = new JLabel();
        accLabel.setText("Acceleration:");
        wheelPanel.add(accLabel);
        accText = new JTextField();
        accText.setPreferredSize(new Dimension(75, 30));
        wheelPanel.add(accText);
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel1.add(bottomPanel, BorderLayout.SOUTH);
        deviceComboBox = new JComboBox();
        deviceComboBox.setMinimumSize(new Dimension(200, 30));
        deviceComboBox.setPreferredSize(new Dimension(200, 30));
        bottomPanel.add(deviceComboBox);
        firmwareLabel = new JLabel();
        firmwareLabel.setText("Version 1.2");
        bottomPanel.add(firmwareLabel);
        ffbPanel = new JPanel();
        ffbPanel.setLayout(new GridBagLayout());
        Inputs.addTab("Force Feedback", ffbPanel);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ffbPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        ffbPanel.add(spacer2, gbc);
        label1.setLabelFor(velocityText);
        accLabel.setLabelFor(accText);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
